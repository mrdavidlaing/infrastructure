#!/usr/bin/env bash

set -e
set -u

# from https://stackoverflow.com/a/246128
HOME_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../" >/dev/null 2>&1 && pwd )"

main() {
  symlink_all_the_things
  install_fonts
  configure_terminal
#   set_clock_format
#   set_dock_preferences
  invoke_homebrew
  invoke_softewareupdate
  write_last_repave_date
  commit_homedir_changes
}

install_fonts() {
  # Install the modified Meslo Nerd Font used by https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k
  local font_path="${HOME}/Library/Fonts"
  local meslo_nf_path="${font_path}/MesloLGS NF Regular.ttf"
  echo "====> Installing modified Meslo Nerd Fonts to ~/Library/Fonts/ from https://github.com/romkatv/powerlevel10k#meslo-nerd-font-patched-for-powerlevel10k"
  if [ -f "${meslo_nf_path}" ]; then
    echo "  Skipping because they are already installed." 
  else
    curl -L -o "${font_path}/MesloLGS NF Regular.ttf"     https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf
    curl -L -o "${font_path}/MesloLGS NF Bold.ttf"        https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf
    curl -L -o "${font_path}/MesloLGS NF Italic.ttf"      https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf
    curl -L -o "${font_path}/MesloLGS NF Bold Italic.ttf" https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf
  fi
  echo "Done!"
}

symlink_all_the_things() {
  # Use the absolute path so that ls -la output doesn't include relative paths - eg: homedirs/osx/bin/../config/dot.config
  local common_source=$(cd "${HOME_DIR}/../common"; pwd)
  local config_dir="${HOME_DIR}/config"
  local common_config_dir="${common_source}/common/config"

  if [[ ! -d ~/.config ]]; then
    mkdir ~/.config
  fi

#   if [[ ! -d ~/.gnupg ]]; then
#     mkdir ~/.gnupg
#     chmod 700 ~/.gnupg
#   fi
#   ln -sfv "${common_dotfiles_dir}/dot.gnupg/gpg-agent.conf" ~/.gnupg/gpg-agent.conf

    ln -sfv "${common_config_dir}/dot.gitconfig" ~/.gitconfig


#   ln -sfv "${common_dotfiles_dir}/dot.githelpers" ~/.githelpers
#   ln -sfv "${common_dotfiles_dir}/dot.tmux.conf" ~/.tmux.conf
#   ln -sfv "${common_dotfiles_dir}/dot.mrconfig" ~/.mrconfig 

  # https://ss64.com/osx/ln.html the -h is important to not put a symlink in a dir symlink
#   ln -shfv "${common_dotfiles_dir}/dot.config/alacritty" ~/.config/alacritty
#   ln -shfv "${common_dotfiles_dir}/dot.config/nvim" ~/.config/nvim

  ln -sfv "${config_dir}/dot.zshrc" ~/.zshrc
  ln -sfv "${config_dir}/dot.p10k.zsh" ~/.p10k.zsh
}

configure_terminal() {
  local config_dir="${HOME_DIR}/config"

  # Convert the XML config that we commit to the binary format needed by Mac Terminal app
  cp "${config_dir}/com.apple.Terminal.plist.xml" "${config_dir}/com.apple.Terminal.plist"
  plutil -convert binary1 "${config_dir}/com.apple.Terminal.plist"

  # Symlink our settings over the system settings
  ln -sfv "${config_dir}/com.apple.Terminal.plist" ~/Library/Preferences/com.apple.Terminal.plist

  # To commit changed settings settings
  # $ cp com.apple.Terminal.plist com.apple.Terminal.plist.xml
  # $ plutil -convert xml1 com.apple.Terminal.plist.xml
  # commit changes
}
  
write_last_repave_date() {
  date > ~/.repavedate
}

invoke_homebrew() {
  if [ ! -x /opt/homebrew/bin/brew ]
  then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  else
    brew update || true
  fi

  brew bundle --file="${HOME_DIR}/Brewfile"
}

# Instruction manual:
#   https://www.tech-otaku.com/mac/setting-the-date-and-time-format-for-the-macos-menu-bar-clock-using-terminal/
set_clock_format() {
  defaults write "com.apple.menuextra.clock" "DateFormat" -string "MMM d  HH:mm:ss"
  killall SystemUIServer
}

set_dock_preferences() {
  defaults write "com.apple.dock" "orientation" -string "left"
  defaults write "com.apple.dock" "autohide" -bool "true"
  # clears all the stuff I don't need or want
  defaults write "com.apple.dock" "persistent-apps" -array
  killall Dock
}

run_softwareupdate() {
  local softwareupdate_indicator
  softwareupdate_indicator="$1"
  sudo softwareupdate -i -a && touch "${softwareupdate_indicator}"
}

last_softwareupdate_was_over_7_days_ago() {
  local softwareupdate_indicator
  softwareupdate_indicator="$1"
  last_run=$(echo $(($(date +%s) - $(stat -t %s -f %m -- "${softwareupdate_indicator}"))))
  last_run_days=$(( $last_run / (24 * 60 * 60) ))
  echo Last software update was $last_run_days days ago
  [ "${last_run_days}" -gt "7" ]
}


invoke_softewareupdate() {
  local softwareupdate_indicator
  softwareupdate_indicator=~/.softwareupdate_indicator

  if [ ! -f "${softwareupdate_indicator}" ]
  then
    echo Indicator of previous softwareupdate execution does not appear to exist.
    run_softwareupdate "${softwareupdate_indicator}"
  else
    if last_softwareupdate_was_over_7_days_ago "${softwareupdate_indicator}"
    then
      echo Going to run a softwareupdate since it has been a while
      run_softwareupdate "${softwareupdate_indicator}"
    else
      echo Since softwareupdate ran recently, not going to do anything
      echo remove ${softwareupdate_indicator} to force an update
    fi
  fi
}

commit_homedir_changes() {
  pushd "${HOME_DIR}"
    if [[ `git status --porcelain` ]]; then
      echo "Adding & pushing homedir changes upstream"
      git add -p
      git commit
      git push
    else
      echo "No homedir changes detected.  Skipping git update"
    fi
  popd
}

main
